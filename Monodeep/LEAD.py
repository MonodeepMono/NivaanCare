import datetime
import pandas as pd
from pandas import DataFrame
from pprint import pprint
import json
import xlsxwriter
import numpy as np
import pandas.io.sql as psql
import mysql.connector



##########LEADS##################3

mydb_prod = mysql.connector.connect(
  host="prod-nivaancare-mysql-02.cydlopxelbug.ap-south-1.rds.amazonaws.com",
  user="monodeep.saha",
  password="u5eOX37kNPh13J",
  database="nivaancare_production"
)
mycursor_prod = mydb_prod.cursor()
conn_prod = mycursor_prod.execute

sql_query_prod = """
#  SELECT 
#     url.owner AS owner,
#      url.lead_id AS LeadID,
#     CONVERT_TZ(url.created_time, 'UTC', 'Asia/Kolkata') AS created_time, 
#     CONVERT_TZ(url.modified_time, 'UTC', 'Asia/Kolkata') AS modified_time,
#     CASE 
#         WHEN CONVERT(JSON_UNQUOTE(JSON_EXTRACT(owner, '$.name')) USING utf8) = 'Himanshu H' THEN 'Himanshu_H'
#         ELSE CONVERT(JSON_UNQUOTE(JSON_EXTRACT(owner, '$.name')) USING utf8) 
#     END AS owner_name,
#     url.mobile AS Mobile,
#     url.lead_new_status AS lead_new_status
# FROM nivaancare_production.user_registration_lead url 
# WHERE DATE_FORMAT(url.modified_time, '%Y-%m-%d') >= '2024-04-10' 
#     AND DATE_FORMAT(url.modified_time, '%Y-%m-%d') <= '2024-04-17'

SELECT 
    url.owner AS owner,
    url.lead_id AS LeadID,
    CONVERT_TZ(url.created_time, 'UTC', 'Asia/Kolkata') AS created_time, 
    CONVERT_TZ(url.modified_time, 'UTC', 'Asia/Kolkata') AS modified_time,
    CASE 
        WHEN CONVERT(JSON_UNQUOTE(JSON_EXTRACT(owner, '$.name')) USING utf8) = 'Himanshu H' THEN 'Himanshu_H'
        ELSE CONVERT(JSON_UNQUOTE(JSON_EXTRACT(owner, '$.name')) USING utf8) 
    END AS owner_name,
    url.mobile AS Mobile,
    url.lead_new_status AS lead_new_status
FROM nivaancare_production.user_registration_lead url 
WHERE url.mobile in ("9873260558", 
"8445045736", 
"9811176450", 
"8448351511", 
"9865325808", 
"9799748564", 
"9811900643", 
"7078540638", 
"9582401032", 
"7500324471", 
"8527004553", 
"8882272773", 
"9650166740", 
"9810206803", 
"9973258690", 
"8527652796", 
"9599056180", 
"9772721141", 
"8218199098", 
"9873191631", 
"9891001312", 
"9717943530", 
"7053721524", 
"267970734", 
"9928990709", 
"171333083", 
"697043486", 
"2550715305490", 

"2540725324128", 
"9813998989", 
"2540824559446", 
"919968534537", 
"256256782842181", 
"2540715984646", 
"2540732760297", 
"23408160588782", 
"234816931285", 
"472192476", 
"9868442694", 
"254731704962", 
"2540725970080", 
"25410724837900", 
"23408060033057", 
"9811079882", 
"2540756999195", 
"9999368134", 
"9730770139", 
"8375025900", 
"7985438122", 
"8295694220", 
"9811623980", 
"9811376048", 
"9810089734", 
"8951386385", 
"9667733447", 
"9868156698", 
"9810506512", 
"9560839284", 
"7840063300", 
"9268108200", 
"7011004380", 
"9818841359", 
"9213135878", 
"8828040447", 
"8951391190", 
"9990806644", 
"9873885265", 
"9871226690", 
"9599659938", 
"9650045561", 
"8585952096", 
"9871896137", 
"8287616955", 
"9717587343", 
"9650831081", 
"9268361910", 
"9315170905", 
"9810072263", 
"2348034687738", 
"9911231256", 
"9311349078", 
"9871106799", 
"8368390107", 
"9627331636", 
"9868951201", 
"8076866687", 
"9350357961", 
"9013212681", 
"9935230309", 
"9968073417", 
"9818291310", 
"7989556354", 
"9149201928", 
"9873224651", 
"9818557646", 
"8601490992", 
"8092645704", 
"7838033828", 
"8743079855", 
"9999551011", 
"9716454697", 
"8882663706", 
"8053227811", 
"9971602474", 
"9953230373", 
"9711581217", 
"9910075589", 
"9654253461", 
"9873636565", 
"9868803797", 
"8447588881", 
"8750883456", 
"9205517720", 
"8800841947", 
"9810207313", 
"9354475115", 
"7428832163", 
"9313858487", 
"9811982313", 
"7290950679", 
"9149711490", 
"9999037538", 
"9205538365", 
"7999730094", 
"9312902985", 
"7355105074", 
"9354125141", 
"9582002852", 
"23408057827875", 
"8630710071", 
"9873567812", 
"9971394995", 
"8287259113", 
"6239684137", 
"8395007979", 
"9312662562", 
"8700954540", 
"9810923234", 
"8929591291", 
"9711922028", 
"8750788098", 
"9999046021", 
"9818175977", 
"9953287898", 
"9818414845", 
"9991118807", 
"8130594358", 
"9810899187", 
"9999094425", 
"9310003911", 
"8419046270", 
"9101638445", 
"6267191957", 
"7065411802", 
"2540748025886", 
"9911942332", 
"9205954044", 
"9811031636", 
"9968313052", 
"8130574609", 
"7011571271", 
"9313965076", 
"9911398818", 
"8130995410", 
"8178596312", 
"8287003398", 
"9268604386", 
"7982368968", 
"7678529311", 
"9582882758", 
"9868420630", 
"9968090055", 
"9910628783", 
"9871006310", 
"9718208139", 
"9350536431", 
"9990806492", 
"7011904527", 
"8076410197", 
"9354770117", 
"9650761878", 
"9810114595", 
"9711719906", 
"9925567733", 
"7982256861", 
"9999841961", 
"8750776886", 
"9897559895", 
"8630006019", 
"9968245935", 
"9871475410", 
"9867329792", 
"9968262929", 
"9250308973", 
"8800878596", 
"8076371705", 
"8700747997", 
"9868629390", 
"8630533584", 
"9811309721", 
"8360830634", 
"9818875802", 
"9810103232", 
"9718376237", 
"9958498129", 
"9311727180", 
"9811658588", 
"9705768195", 
"8826177741", 
"8447737767", 
"8920554220", 
"9910701979", 
"8386885333", 
"9289726822", 
"9811840456", 
"8920361067", 
"9205982083", 
"9990866333", 
"9931557598", 
"9711124212", 
"9953258205", 
"9818094946", 
"9818913222", 
"9899558903", 
"8743078589", 
"9873790444", 
"8287395340", 
"9897095240", 
"9818757475", 
"8882020497", 
"9999148486", 
"9278420811", 
"7088148076", 
"9958702267", 
"7357572473", 
"9811158785", 
"9759703100", 
"9650219713", 
"8826737741", 
"9818647244", 
"9899306203", 
"9871103062", 
"9211313142", 
"9810396367", 
"9205540966", 
"7982489990", 
"8178063911", 
"8426001237", 
"9709598049", 
"9412630285", 
"8383856085", 
"7678600155", 
"9540526465", 
"8076306609", 
"9717131477", 
"7042776833", 
"7683091293", 
"9868837154", 
"9871871097", 
"9873846037", 
"9818464723", 
"6297694203", 
"9013471337", 
"8929000808", 
"9911846918", 
"8249753371", 
"9354172747", 
"9810417159", 
"9650236262", 
"9990740351", 
"9718672164", 
"7701979080", 
"9013397255", 
"9540144188", 
"8512804030", 
"9870810087", 
"9213283122", 
"9818086502", 
"8250043705", 
"8954726998", 
"8448970943", 
"9582061237", 
"8588804880", 
"9695211163", 
"8750225656", 
"8953134888", 
"9005395444", 
"9810558557", 
"9999270717", 
"9871742773", 
"7428625514", 
"7210066023", 
"9958365138", 
"9897356007", 
"8700463990", 
"9868107340", 
"9808107838", 
"9571108444", 
"9650586397", 
"9599555724", 
"8700731844", 
"8340506657", 
"8800514481", 
"8800911933", 
"8802175732", 
"9810989654", 
"9990441686", 
"8130157227", 
"9810005088", 
"8287530017", 
"7240250469", 
"9013982961", 
"7874604035", 
"9718689283", 
"9015197347", 
"9212406887", 
"8076267296", 
"7678184306", 
"9717858907", 
"8800864281", 
"8010033717", 
"9654514349", 
"919818194288", 
"7065676420", 
"9318500789", 
"8447047377", 
"9911357159", 
"7011365448", 
"9999179162", 
"9211409499", 
"8447356476", 
"9868982602", 
"9870140562", 
"7053850636", 
"9311148580", 
"9205921963", 
"8929584219", 
"9810178294", 
"8800892327", 
"9990009797", 
"9818152884", 
"9711052388", 
"9717786153", 
"7217858219", 
"9899402983", 
"9319779472", 
"8178966085", 
"9996739966", 
"9911775054", 
"9810015713", 
"7011350153", 
"9625011140", 
"9811673345", 
"wappsend", 
"8130484209", 
"9680968046", 
"8882545447", 
"9871166687", 
"6026020715", 
"9622222044", 
"7889495145", 
"9968763966", 
"8586011251", 
"9810081003", 
"9695527028", 
"9555243381", 
"9818130439", 
"9650648789", 
"9599656331", 
"8178008419", 
"9213534528", 
"9711264199", 
"9312349184", 
"7982932382", 
"9354485883", 
"9958250421", 
"8802444968", 
"8920935978", 
"9821945544", 
"9350901641", 
"9479711501", 
"9990520558", 
"9868300512", 
"9999150572", 
"9910449611", 
"9315276582", 
"9818378128", 
"8951382568", 
"8882873557", 
"8447777529", 
"9716086534", 
"7015547761", 
"9818671916", 
"9015991079", 
"9911937646", 
"9717373578", 
"9058847197", 
"7500183339", 
"9958674874", 
"8619335179", 
"7999585273", 
"9953999305", 
"7701838871", 
"9999975231", 
"8700583651", 
"9827698881", 
"7503930256", 
"9599293869", 
"9319717410", 
"8218095411", 
"8218528618", 
"9582733215", 
"9625428396", 
"9810037004", 
"9650029147", 
"9654370297", 
"9268166307", 
"8813049045", 
"9911328987", 
"9871611488", 
"9811062181", 
"7678422258", 
"9211370288", 
"8447527336", 
"8802243853", 
"8983873446", 
"9811609050", 
"9910188116", 
"7983018664", 
"8368933364", 
"8800740661", 
"8929008855", 
"9871889331", 
"9752975266", 
"9811375097", 
"9667890678", 
"9560355174", 
"7838681966", 
"9811894573", 
"7297836723", 
"8800358501", 
"9797299349", 
"8802147554", 
"9818406392", 
"7838104795", 
"9650343559", 
"9911051185", 
"9811657784", 
"9310456774", 
"9910329695", 
"9718205879", 
"9811408329", 
"9910445637", 
"9571557768", 
"9871321139", 
"9360628942", 
"9650288533", 
"9968018862", 
"9212964932", 
"9868754222", 
"8826162616", 
"9999242267", 
"9810833929", 
"9628360396", 
"9205320178", 
"9212300089", 
"9818273991", 
"9999467499", 
"9316625222", 
"8601593767", 
"9312211305", 
"9971271285", 
"9304667662", 
"9368021295", 
"9582062829", 
"8700282165", 
"9899833209", 
"7291006576", 
"9818423868", 
"9910950977", 
"8700879258", 
"9968556262", 
"9990376658", 
"107876080353", 
"7303637657", 
"7011487534", 
"8447811810", 
"9868890633", 
"9560966526", 
"9718373777", 
"8800463389", 
"7982070753", 
"8802964549", 
"8383825603", 
"8860228855", 
"8800367609", 
"9891964605", 
"9821787921", 
"8750116937", 
"8218198914", 
"9910786928", 
"9667279154", 
"9968685694", 
"8146655777", 
"8826384898", 
"9310714226", 
"7836042459", 
"9354196074", 
"9910229505", 
"9910369022", 
"9871483884", 
"7508783864", 
"9968012877", 
"8375980143", 
"9871812917", 
"9718386511", 
"9289066574", 
"9953124755", 
"8750980460", 
"8800552260", 
"9911332440", 
"9891949495", 
"9818205623", 
"9810082634", 
"9910348784", 
"9811313469", 
"9818068552", 
"7217634207", 
"9582283588", 
"9711858748", 
"8585927366", 
"9958416418", 
"9718714238", 
"7728854445", 
"9278555986", 
"9451957923", 
"9820218786", 
"9457323827", 
"9136118021", 
"9899267367", 
"9811155616", 
"9911827053", 
"7503833550", 
"9891467851", 
"8800844976", 
"9958185233", 
"7428734479", 
"8851921225", 
"9794839231", 
"9817546002", 
"9015808000", 
"8587091832", 
"8826777817", 
"9612375076", 
"8588031386", 
"9868979690", 
"8208267578", 
"8750585784", 
"8199989850", 
"9811803682", 
"9958710218", 
"9868189919", 
"7042843815", 
"9868360636", 
"9818384282", 
"8882921672", 
"9711064638", 
"7905412662", 
"9818810515", 
"9667324492", 
"9625456202", 
"8540836050", 
"7042920400", 
"7355618123", 
"8505972330", 
"8178326359", 
"9810889076", 
"9560046542", 
"9990539789", 
"9968264431", 
"7289019123", 
"9871479429", 
"9811058837", 
"8800710135", 
"9810076635", 
"9582742493", 
"9910271297", 
"9818137555", 
"9910237537", 
"9999999999", 
"9810468573", 
"8588838183", 
"9310414102", 
"9868716643", 
"7533940861", 
"8800623866", 
"9315002217", 
"9990141408", 
"9911766257", 
"8285270786", 
"9990451071", 
"9507548387", 
"9999611109", 
"7042164305", 
"7838210075", 
"8597780667", 
"8826922501", 
"9650310137", 
"9467244289", 
"9810121512", 
"6378308083", 
"9711189837", 
"9654638596", 
"9911642405", 
"9312836637", 
"9008230796", 
"8853071431", 
"8802262018", 
"9716267725", 
"9968240024", 
"8130938818", 
"9810836901", 
"8766245721", 
"9318334903", 
"9540322389", 
"9068531547", 
"7027741498", 
"9717364062", 
"9540784264", 
"9718160622", 
"9828543354", 
"7597926282", 
"9910507014", 
"9971416523", 
"7065679683", 
"8076237868", 
"9717385044", 
"9811154427", 
"9810423678", 
"8383014871", 
"9911154668", 
"9868166565", 
"9313615478", 
"9810107555", 
"9810428498", 
"9891237003", 
"9891697500", 
"9811262055", 
"9835621209", 
"8800542191", 
"9818506660", 
"8368325554", 
"7982303660", 
"9910519141", 
"9312404098", 
"9315219012", 
"9810505873", 
"8527505608"

)
"""
df_LEAD = pd.read_sql_query(sql_query_prod,mydb_prod)


df_LEAD['Rank_Status'] = df_LEAD.groupby(['Mobile'])['modified_time'].rank("dense", ascending=False)
# df_LEAD['Rank_OWNER'] = df_LEAD.groupby(['Mobile','owner_name'])['modified_time'].rank("dense", ascending=True)
df_LEAD['Rank_OWNER'] = df_LEAD.groupby('LeadID')['owner_name'].transform('nunique')
df_LEAD['Rank_OWNER_NEW'] = df_LEAD.groupby('LeadID')['owner_name'].transform(lambda x: x.ne(x.shift()).cumsum())


df_FINAL  = df_LEAD[['LeadID', 'Mobile'	,'created_time',	'modified_time',	'owner_name',	'lead_new_status','Rank_Status','Rank_OWNER','Rank_OWNER_NEW']]
print(df_FINAL)

df_FINAL.to_csv('LEAD.csv',index = False)

import gspread
import csv
from oauth2client.service_account import ServiceAccountCredentials


scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']

credentials = ServiceAccountCredentials.from_json_keyfile_name(r'my-project-2024-414004-60efb95f9e7f.json',scope)
gc = gspread.authorize(credentials)
client = gspread.authorize(credentials)
spreadsheetId = '1Y1Bm7N2EgnTcD8y1_lZ9-mTKLwrgHJzoTpvK-x0RGR8' 

sheetName = 'LEAD'        # Please set sheet name you want to put the CSV data.
csvFile = 'LEAD.csv'  # Please set the filename and path of csv file.
sh = client.open_by_key(spreadsheetId)
sh.values_clear("'LEAD'!A2:X")
sh.values_update(sheetName,
                 params={'valueInputOption': 'USER_ENTERED'},
                 body={'values': list(csv.reader(open(csvFile,encoding='utf-8')))})
